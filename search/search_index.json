{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Lab Scale Gantry Crane Docs This is the documentation of the lab scale gantry crane. It is a little gantry crane that has been used in various papers as a demonstrator. The documentation covers the build of the crane, the accompanying gantrylib module and exmaples using this module. Documentation layout Home: this page Build: building instructions for the physical part of the crane. Arduino: documentation of the arduino scripts Examples: documentation of the examples gantrylib: api reference for the gantrylib Software prerequisites Installing gantrylib The examples rely on the gantrylib module. Since there's no official release (yet) we recommend installing it in editable mode, this also allows for on the fly code changes. In the root of this repository run: python -m pip install -e . We recommend doing so in a virtual environment. Arduino sketches To open and flash the Arduino sketches you can install the Arduino IDE Opening CAD files All CAD files are made with Fusion360 It's free for personal use. Your educational institution likely also has a license. All files have already been exported to 3MF files, so you only need Fusion360 when you want to make edits. Viewing the docs offline The docs are built with MkDocs . If you want to host those locally rather than view them on GitHub pages you should additionally install it. python -m pip install mkdocs mkdocstrings[python] You can view the docs by running mkdocs serve Then opening http://127.0.0.1:8000/ Hardware prerequisites 3D Printer Some parts of the crane need to be 3D printed. To do so you need a 3D printer and accompanying slicer. For reference: our parts where printed on Prusa i3 MK4's and sliced with PrusaSlicer","title":"Home"},{"location":"#lab-scale-gantry-crane-docs","text":"This is the documentation of the lab scale gantry crane. It is a little gantry crane that has been used in various papers as a demonstrator. The documentation covers the build of the crane, the accompanying gantrylib module and exmaples using this module.","title":"Lab Scale Gantry Crane Docs"},{"location":"#documentation-layout","text":"Home: this page Build: building instructions for the physical part of the crane. Arduino: documentation of the arduino scripts Examples: documentation of the examples gantrylib: api reference for the gantrylib","title":"Documentation layout"},{"location":"#software-prerequisites","text":"","title":"Software prerequisites"},{"location":"#installing-gantrylib","text":"The examples rely on the gantrylib module. Since there's no official release (yet) we recommend installing it in editable mode, this also allows for on the fly code changes. In the root of this repository run: python -m pip install -e . We recommend doing so in a virtual environment.","title":"Installing gantrylib"},{"location":"#arduino-sketches","text":"To open and flash the Arduino sketches you can install the Arduino IDE","title":"Arduino sketches"},{"location":"#opening-cad-files","text":"All CAD files are made with Fusion360 It's free for personal use. Your educational institution likely also has a license. All files have already been exported to 3MF files, so you only need Fusion360 when you want to make edits.","title":"Opening CAD files"},{"location":"#viewing-the-docs-offline","text":"The docs are built with MkDocs . If you want to host those locally rather than view them on GitHub pages you should additionally install it. python -m pip install mkdocs mkdocstrings[python] You can view the docs by running mkdocs serve Then opening http://127.0.0.1:8000/","title":"Viewing the docs offline"},{"location":"#hardware-prerequisites","text":"","title":"Hardware prerequisites"},{"location":"#3d-printer","text":"Some parts of the crane need to be 3D printed. To do so you need a 3D printer and accompanying slicer. For reference: our parts where printed on Prusa i3 MK4's and sliced with PrusaSlicer","title":"3D Printer"},{"location":"about/","text":"about.md Pages maintained by Joost Mertens In case of question, feel free to get in touch by email or use the github issues: joost.mertens@uantwerpen.be","title":"About"},{"location":"about/#aboutmd","text":"Pages maintained by Joost Mertens In case of question, feel free to get in touch by email or use the github issues: joost.mertens@uantwerpen.be","title":"about.md"},{"location":"arduino/","text":"arduino.md Prerequisites Install following dependencies in the arduino IDE: Encoder PinChangeInterrupt Explanation In a nutshell: there are two arduino scripts one to measure angles with the encoder one to control the electromagnet (with additional functions) this script requires you to build the arduino shield, for which KiCad files are provided. In the future all of this code should be placed on one Arduino, and the shield updated to a V2, which is future work. MQTT Wrapper The shield was actually used to control a Fischertechnik conveyor belt with the arduino, (to be detailled more) The command interface over serial can be found in the readme.md file in the folder. We also provide an MQTT wrapper around it such that you can interface with Python or any other general purpose programming language. TODO: document.","title":"Arduino"},{"location":"arduino/#arduinomd","text":"","title":"arduino.md"},{"location":"arduino/#prerequisites","text":"Install following dependencies in the arduino IDE: Encoder PinChangeInterrupt","title":"Prerequisites"},{"location":"arduino/#explanation","text":"In a nutshell: there are two arduino scripts one to measure angles with the encoder one to control the electromagnet (with additional functions) this script requires you to build the arduino shield, for which KiCad files are provided. In the future all of this code should be placed on one Arduino, and the shield updated to a V2, which is future work.","title":"Explanation"},{"location":"arduino/#mqtt-wrapper","text":"The shield was actually used to control a Fischertechnik conveyor belt with the arduino, (to be detailled more) The command interface over serial can be found in the readme.md file in the folder. We also provide an MQTT wrapper around it such that you can interface with Python or any other general purpose programming language. TODO: document.","title":"MQTT Wrapper"},{"location":"build/","text":"build.md Building instructions. TODO: complete this further. For now: refer to the Fusion360 files. Screws The following images try to convey which bolts and nuts are needed at which spots in the crane. I will edit these in the future to have annotation on them.","title":"Build"},{"location":"build/#buildmd","text":"","title":"build.md"},{"location":"build/#building-instructions","text":"TODO: complete this further. For now: refer to the Fusion360 files.","title":"Building instructions."},{"location":"build/#screws","text":"The following images try to convey which bolts and nuts are needed at which spots in the crane. I will edit these in the future to have annotation on them.","title":"Screws"},{"location":"examples/","text":"examples.md Gantry Controller Mock Gantry Controller This script demonstrates the MockGantryController class. No database writing is done in this script. Usage python physical_gantry_controller_example.py Author:Joost Mertens Date: 2021-06-01 Physical Gantry Controller This script demonstrates the PhysicalGantryController class. No database writing is done in this script. Usage python physical_gantry_controller_example.py Author:Joost Mertens Date: 2021-06-01 Trajectory Generator Example This script demonstrates how to use the TrajectoryGenerator class to generate a trajectory for a gantry crane. Usage python trajectory_generator_example.py Author:Joost Mertens Date: 2021-06-01","title":"Examples"},{"location":"examples/#examplesmd","text":"","title":"examples.md"},{"location":"examples/#gantry-controller","text":"","title":"Gantry Controller"},{"location":"examples/#mock-gantry-controller","text":"This script demonstrates the MockGantryController class. No database writing is done in this script. Usage python physical_gantry_controller_example.py Author:Joost Mertens Date: 2021-06-01","title":"Mock Gantry Controller"},{"location":"examples/#physical-gantry-controller","text":"This script demonstrates the PhysicalGantryController class. No database writing is done in this script. Usage python physical_gantry_controller_example.py Author:Joost Mertens Date: 2021-06-01","title":"Physical Gantry Controller"},{"location":"examples/#trajectory-generator-example","text":"This script demonstrates how to use the TrajectoryGenerator class to generate a trajectory for a gantry crane. Usage python trajectory_generator_example.py Author:Joost Mertens Date: 2021-06-01","title":"Trajectory Generator Example"},{"location":"gantrylib/","text":"gantrylib.md crane Crane A class representing the gantrycrane. __enter__() Enter the runtime context for the crane. Returns: Crane \u2013 The crane instance __exit__(exc_type, exc_value, traceback) Exit the runtime context and clean up resources. Parameters: exc_type ( Type [ BaseException ] or None ) \u2013 The type of the exception if one was raised, else None. exc_value ( BaseException or None ) \u2013 The exception instance if one was raised, else None. traceback ( TracebackType or None ) \u2013 The traceback object if an exception was raised, else None. __init__(gantryPort, hoistPort, angleUARTPort, gantryUARTPort, calibrated=False, I_max=1) Initializes a Crane instance. Parameters: gantryPort ( string ) \u2013 Serial port of the motor controller controlling the lateral movement motor. hoistPort ( string ) \u2013 Serial port of the motor controller controlling the hoisting motor. angleUARTPort ( string ) \u2013 Serial port of the Arduino that measures the swing angle gantryUARTPort ( string ) \u2013 unused calibrated ( bool , default: False ) \u2013 Whether the crane's motors are already calibrated or not. Defaults to False. I_max ( int , default: 1 ) \u2013 Maximal motor current. Defaults to 1A executeWaypointsPosition() Attempt to execute the waypoints in position mode. Works by setting the waypoint and altering the motor's velocity limit as the trajectory moves along. Returns: tuple ( ( list [ float ], list [ float ], list [ float ], list [ float ], list [ float ], list [ float ]) ) \u2013 tuple(t, x, v, a, theta, omega), homeAllAxes() Homes all axes. Hoiststepper isn't homed, since we don't have a proper automated homing procedure for it. homeGantry() Homes the cart on the gantry readAngle() Reads the latest received angle from the angleUART Returns: tuple ( ( float , float ) ) \u2013 Tuple(theta, omega) setWaypoints(waypoints) Sets the waypoints to be executed by the crane. Parameters: waypoints ( list [ Waypoint ] ) \u2013 List of Waypoints. motors Motor A class representing a motor. __init__(port, pulley_circumference, I_max) Initializes a Motor instance. Parameters: port \u2013 serial port of the motor controller pulley_circumference \u2013 circumference of the motor pulley I_max \u2013 maximum current getPosition() Get the current position. Returns: int \u2013 The current position getTorque() Get the actually exerted torque. Returns: int \u2013 The actually exerted torque. getVelocity() Get the current velocity. Returns: int \u2013 The current velocity. setAccelLimit(acc) Set acceleration limit. Parameters: acc \u2013 Acceleration limit. setLimits(acc, vel) Set acceleration and velocity limits. Parameters: acc \u2013 Acceleration limit. vel \u2013 Velocity limit. setPosition(pos) Set the current position. Parameters: pos \u2013 current position. setPositionMode() Set motor driver to position mode setTorque(tgt) Set the target torque. Note: assumes printer is in torque mode. Printer can be set in torque mode with setTorqueMode. Parameters: tgt \u2013 target torque setTorqueMode() Set motor drive to torque mode. setVelocity(vel) Set the current velocity Parameters: vel \u2013 The current velocity. setVelocityLimit(vel) Set velocity limit. Parameters: vel \u2013 Velocity limit. setVelocityMode() Set motor driver to velocity mode Stepper Bases: Motor Specialization of the Motor class into a Stepper motor. __init__(port, pulley_diameter, I_max) Initialize a Stepper instance. GantryStepper Bases: Stepper Specializes stepper into the gantry stepper, that is the motor that does the lateral movement. __init__(port, calibrated=False, I_max=1) Initializes an instance of GantryStepper. Parameters: port \u2013 The serial port of the motor controller. calibrated ( bool , default: False ) \u2013 Whether the motor is calibrated or not. Defaults to False. I_max \u2013 The maximum currnet. Defaults to 1 Ampere. HoistStepper Bases: Stepper Specializes stepper into the hoist stepper, that is the motor that does the hoisting movement. __init__(port, calibrated=False, I_max=1) Initializes an instance of GantryStepper. Parameters: port \u2013 The serial port of the motor controller. calibrated ( bool , default: False ) \u2013 Whether the motor is calibrated or not. Defaults to False. I_max \u2013 The maximum currnet. Defaults to 1 Ampere. trajectory_generator TrajectoryGenerator A class to generate an optimal trajectory that moves the crane laterally from one position to another one. __init__(properties_file) Initialize a TrajectoryGenerator instance. Parameters: properties_file ( string ) \u2013 path to a properties file containing problem details. generateTrajectory(start, stop) Generates an optimal, monotone trajectory from start to stop, adhering to the limits imposed by the configurationfile used to create the TrajectoryGenerator Parameters: start ( float ) \u2013 start position of the trajectory stop ( float ) \u2013 stop position of the trajectory Returns: tuple \u2013 tuple (ts, xs, dxs, ddxs, thetas, dthetas, ddthetas) where ts : sample times of solution [s] xs : positions of solution [m] dxs : velocity of solution [m/s] ddxs : acceleration of solution [m/s^2] thetas : angular position of solution [rad] dthetas : angular velocity of solution [rad/s] ddthetas: angular acceleration of solution [rad/s^2] generateTrajectoryLQR(start, stop) Generates an optimal trajectory using a Linear Quadratic Regulator Parameters: start ( float ) \u2013 Start position stop ( float ) \u2013 Stop position Returns: tuple \u2013 tuple (ts, xs, dxs, ddxs, thetas, dthetas, ddthetas) where ts : sample times of solution [s] xs : positions of solution [m] dxs : velocity of solution [m/s] ddxs : acceleration of solution [m/s^2] thetas : angular position of solution [rad] dthetas : angular velocity of solution [rad/s] ddthetas: angular acceleration of solution [rad/s^2] saveDataToMat(filename, data, keys) Save output to a .mat file. Parameters: filename ( string ) \u2013 The filename data ( tuple ) \u2013 data as returned by the trajectory generation methods. keys ( list ) \u2013 list of keys to use. saveParamToMat(filename) Save the parameters of this current trajectory generator to a mat file. Parameters: filename ( string ) \u2013 The filename. saveToCSV(filename, data, columnnames) Save output to CSV file. Parameters: filename ( string ) \u2013 The filename. data ( tuple ) \u2013 data as returned by the trajectory generation methods. columnnames ( list ) \u2013 list of columnnames. gantry_controller GantryController A class representing a controller for the gantry crane __enter__() Enter the runtime context of the gantry controller. Returns: GantryController \u2013 The instance of the GantryController __exit__(exc_type, exc_value, traceback) Exit the runtime context and clean up resources Parameters: exc_type ( Type [ BaseException ] or None ) \u2013 The type of the exception if one was raised, else None. exc_value ( BaseException or None ) \u2013 The exception instance if one was raised, else None. traceback ( TracebackType or None ) \u2013 The traceback object if an exception was raised, else None. __init__(properties_file) Initialize a GantryController instance Parameters: properties_file ( string ) \u2013 path to a properties file that holds details of the gantrycrane. connectToCrane() abstractmethod Method to connect to the gantry crane. This method must be implemented by subclasses to define how to connect to a specific gantry crane. executeTrajectory(traj) abstractmethod Execute a trajectory This methods must be implemented by subclasses to define how the trajectory is executed. Parameters: traj ( tuple ) \u2013 Trajectory tuple as returned by the TrajectoryGenerator generateTrajectory(start, stop, genmethod='ocp') Generate a trajectory using the trajectory generator Parameters: start ( float ) \u2013 The start position of the trajectory stop ( float ) \u2013 The stop position of the trajectory genmethod ( str , default: 'ocp' ) \u2013 Method of generation, either \"ocp\" or \"lqr\". Defaults to \"ocp\". Returns: tuple \u2013 Tuple containing the trajectory hoist(pos) abstractmethod Perform a hoisting movement Must be implemented by subclasses. Parameters: pos ( float ) \u2013 The target height moveTrajectoryWithoutLog(traj) Move according to the given trajectory Parameters: traj ( tuple ) \u2013 Trajectory as returned by the trajectory generator. Returns: tuple \u2013 The measured trajectory moveWithLog(target, generator='ocp') Make a movement and log it to a database Parameters: target ( float ) \u2013 target position in meters generator ( str , default: 'ocp' ) \u2013 Method of generation, either \"ocp\" or \"lqr\". Defaults to \"ocp\". Returns: tuple ( ( tuple , tuple ) ) \u2013 A tuple containing the generated trajectory and the measured trajectory moveWithoutLog(target, generator='ocp') Make a movement but don't log it to the database Parameters: target ( float ) \u2013 target position in meters generator ( str , default: 'ocp' ) \u2013 Method of generation, either \"ocp\" or \"lqr\". Defaults to \"ocp\". Returns: tuple ( ( tuple , tuple ) ) \u2013 A tuple containing the generated trajectory and the measured trajectory simpleMove(target) abstractmethod Perform a simple lateral move without trajectory generation Must be implemented by subclasses. Parameters: target ( float ) \u2013 The target position storeMeasurement(measurement) Store a measurement in the database measurement is assumed to be a tuple as returned by executeTrajectory format: (ts, x, v, a, theta, omega) ts : timestamps [datetime format] x : position [m] v : velocity [m/s] a : acceleration [m/s2] theta : angular position [rad] omega : angular velocity [rad/s] Parameters: measurement ( tuple ) \u2013 Tuple as returned by executeTrajectory storeTrajectory(traj) Store a trajectory in the database traj is assumed to be tuple as returned by generateTrajectory format: (ts, xs, dxs, ddxs, thetas, dthetas, ddthetas) ts : sample times of solution [s] xs : positions of solution [m] dxs : velocity of solution [m/s] ddxs : acceleration of solution [m/s^2] thetas : angular position of solution [rad] dthetas : angular velocity of solution [rad/s] ddthetas: angular acceleration of solution [rad/s^2] us : input force acting on cart [N] Parameters: traj ( tuple ) \u2013 Trajectory tuple as returned by the trajectory generator.","title":"gantrylib"},{"location":"gantrylib/#gantrylibmd","text":"","title":"gantrylib.md"},{"location":"gantrylib/#crane","text":"","title":"crane"},{"location":"gantrylib/#crane_1","text":"A class representing the gantrycrane.","title":"Crane"},{"location":"gantrylib/#gantrylib.crane.Crane.__enter__","text":"Enter the runtime context for the crane. Returns: Crane \u2013 The crane instance","title":"__enter__"},{"location":"gantrylib/#gantrylib.crane.Crane.__exit__","text":"Exit the runtime context and clean up resources. Parameters: exc_type ( Type [ BaseException ] or None ) \u2013 The type of the exception if one was raised, else None. exc_value ( BaseException or None ) \u2013 The exception instance if one was raised, else None. traceback ( TracebackType or None ) \u2013 The traceback object if an exception was raised, else None.","title":"__exit__"},{"location":"gantrylib/#gantrylib.crane.Crane.__init__","text":"Initializes a Crane instance. Parameters: gantryPort ( string ) \u2013 Serial port of the motor controller controlling the lateral movement motor. hoistPort ( string ) \u2013 Serial port of the motor controller controlling the hoisting motor. angleUARTPort ( string ) \u2013 Serial port of the Arduino that measures the swing angle gantryUARTPort ( string ) \u2013 unused calibrated ( bool , default: False ) \u2013 Whether the crane's motors are already calibrated or not. Defaults to False. I_max ( int , default: 1 ) \u2013 Maximal motor current. Defaults to 1A","title":"__init__"},{"location":"gantrylib/#gantrylib.crane.Crane.executeWaypointsPosition","text":"Attempt to execute the waypoints in position mode. Works by setting the waypoint and altering the motor's velocity limit as the trajectory moves along. Returns: tuple ( ( list [ float ], list [ float ], list [ float ], list [ float ], list [ float ], list [ float ]) ) \u2013 tuple(t, x, v, a, theta, omega),","title":"executeWaypointsPosition"},{"location":"gantrylib/#gantrylib.crane.Crane.homeAllAxes","text":"Homes all axes. Hoiststepper isn't homed, since we don't have a proper automated homing procedure for it.","title":"homeAllAxes"},{"location":"gantrylib/#gantrylib.crane.Crane.homeGantry","text":"Homes the cart on the gantry","title":"homeGantry"},{"location":"gantrylib/#gantrylib.crane.Crane.readAngle","text":"Reads the latest received angle from the angleUART Returns: tuple ( ( float , float ) ) \u2013 Tuple(theta, omega)","title":"readAngle"},{"location":"gantrylib/#gantrylib.crane.Crane.setWaypoints","text":"Sets the waypoints to be executed by the crane. Parameters: waypoints ( list [ Waypoint ] ) \u2013 List of Waypoints.","title":"setWaypoints"},{"location":"gantrylib/#motors","text":"","title":"motors"},{"location":"gantrylib/#motor","text":"A class representing a motor.","title":"Motor"},{"location":"gantrylib/#gantrylib.motors.Motor.__init__","text":"Initializes a Motor instance. Parameters: port \u2013 serial port of the motor controller pulley_circumference \u2013 circumference of the motor pulley I_max \u2013 maximum current","title":"__init__"},{"location":"gantrylib/#gantrylib.motors.Motor.getPosition","text":"Get the current position. Returns: int \u2013 The current position","title":"getPosition"},{"location":"gantrylib/#gantrylib.motors.Motor.getTorque","text":"Get the actually exerted torque. Returns: int \u2013 The actually exerted torque.","title":"getTorque"},{"location":"gantrylib/#gantrylib.motors.Motor.getVelocity","text":"Get the current velocity. Returns: int \u2013 The current velocity.","title":"getVelocity"},{"location":"gantrylib/#gantrylib.motors.Motor.setAccelLimit","text":"Set acceleration limit. Parameters: acc \u2013 Acceleration limit.","title":"setAccelLimit"},{"location":"gantrylib/#gantrylib.motors.Motor.setLimits","text":"Set acceleration and velocity limits. Parameters: acc \u2013 Acceleration limit. vel \u2013 Velocity limit.","title":"setLimits"},{"location":"gantrylib/#gantrylib.motors.Motor.setPosition","text":"Set the current position. Parameters: pos \u2013 current position.","title":"setPosition"},{"location":"gantrylib/#gantrylib.motors.Motor.setPositionMode","text":"Set motor driver to position mode","title":"setPositionMode"},{"location":"gantrylib/#gantrylib.motors.Motor.setTorque","text":"Set the target torque. Note: assumes printer is in torque mode. Printer can be set in torque mode with setTorqueMode. Parameters: tgt \u2013 target torque","title":"setTorque"},{"location":"gantrylib/#gantrylib.motors.Motor.setTorqueMode","text":"Set motor drive to torque mode.","title":"setTorqueMode"},{"location":"gantrylib/#gantrylib.motors.Motor.setVelocity","text":"Set the current velocity Parameters: vel \u2013 The current velocity.","title":"setVelocity"},{"location":"gantrylib/#gantrylib.motors.Motor.setVelocityLimit","text":"Set velocity limit. Parameters: vel \u2013 Velocity limit.","title":"setVelocityLimit"},{"location":"gantrylib/#gantrylib.motors.Motor.setVelocityMode","text":"Set motor driver to velocity mode","title":"setVelocityMode"},{"location":"gantrylib/#stepper","text":"Bases: Motor Specialization of the Motor class into a Stepper motor.","title":"Stepper"},{"location":"gantrylib/#gantrylib.motors.Stepper.__init__","text":"Initialize a Stepper instance.","title":"__init__"},{"location":"gantrylib/#gantrystepper","text":"Bases: Stepper Specializes stepper into the gantry stepper, that is the motor that does the lateral movement.","title":"GantryStepper"},{"location":"gantrylib/#gantrylib.motors.GantryStepper.__init__","text":"Initializes an instance of GantryStepper. Parameters: port \u2013 The serial port of the motor controller. calibrated ( bool , default: False ) \u2013 Whether the motor is calibrated or not. Defaults to False. I_max \u2013 The maximum currnet. Defaults to 1 Ampere.","title":"__init__"},{"location":"gantrylib/#hoiststepper","text":"Bases: Stepper Specializes stepper into the hoist stepper, that is the motor that does the hoisting movement.","title":"HoistStepper"},{"location":"gantrylib/#gantrylib.motors.HoistStepper.__init__","text":"Initializes an instance of GantryStepper. Parameters: port \u2013 The serial port of the motor controller. calibrated ( bool , default: False ) \u2013 Whether the motor is calibrated or not. Defaults to False. I_max \u2013 The maximum currnet. Defaults to 1 Ampere.","title":"__init__"},{"location":"gantrylib/#trajectory_generator","text":"","title":"trajectory_generator"},{"location":"gantrylib/#trajectorygenerator","text":"A class to generate an optimal trajectory that moves the crane laterally from one position to another one.","title":"TrajectoryGenerator"},{"location":"gantrylib/#gantrylib.trajectory_generator.TrajectoryGenerator.__init__","text":"Initialize a TrajectoryGenerator instance. Parameters: properties_file ( string ) \u2013 path to a properties file containing problem details.","title":"__init__"},{"location":"gantrylib/#gantrylib.trajectory_generator.TrajectoryGenerator.generateTrajectory","text":"Generates an optimal, monotone trajectory from start to stop, adhering to the limits imposed by the configurationfile used to create the TrajectoryGenerator Parameters: start ( float ) \u2013 start position of the trajectory stop ( float ) \u2013 stop position of the trajectory Returns: tuple \u2013 tuple (ts, xs, dxs, ddxs, thetas, dthetas, ddthetas) where ts : sample times of solution [s] xs : positions of solution [m] dxs : velocity of solution [m/s] ddxs : acceleration of solution [m/s^2] thetas : angular position of solution [rad] dthetas : angular velocity of solution [rad/s] ddthetas: angular acceleration of solution [rad/s^2]","title":"generateTrajectory"},{"location":"gantrylib/#gantrylib.trajectory_generator.TrajectoryGenerator.generateTrajectoryLQR","text":"Generates an optimal trajectory using a Linear Quadratic Regulator Parameters: start ( float ) \u2013 Start position stop ( float ) \u2013 Stop position Returns: tuple \u2013 tuple (ts, xs, dxs, ddxs, thetas, dthetas, ddthetas) where ts : sample times of solution [s] xs : positions of solution [m] dxs : velocity of solution [m/s] ddxs : acceleration of solution [m/s^2] thetas : angular position of solution [rad] dthetas : angular velocity of solution [rad/s] ddthetas: angular acceleration of solution [rad/s^2]","title":"generateTrajectoryLQR"},{"location":"gantrylib/#gantrylib.trajectory_generator.TrajectoryGenerator.saveDataToMat","text":"Save output to a .mat file. Parameters: filename ( string ) \u2013 The filename data ( tuple ) \u2013 data as returned by the trajectory generation methods. keys ( list ) \u2013 list of keys to use.","title":"saveDataToMat"},{"location":"gantrylib/#gantrylib.trajectory_generator.TrajectoryGenerator.saveParamToMat","text":"Save the parameters of this current trajectory generator to a mat file. Parameters: filename ( string ) \u2013 The filename.","title":"saveParamToMat"},{"location":"gantrylib/#gantrylib.trajectory_generator.TrajectoryGenerator.saveToCSV","text":"Save output to CSV file. Parameters: filename ( string ) \u2013 The filename. data ( tuple ) \u2013 data as returned by the trajectory generation methods. columnnames ( list ) \u2013 list of columnnames.","title":"saveToCSV"},{"location":"gantrylib/#gantry_controller","text":"","title":"gantry_controller"},{"location":"gantrylib/#gantrycontroller","text":"A class representing a controller for the gantry crane","title":"GantryController"},{"location":"gantrylib/#gantrylib.gantry_controller.GantryController.__enter__","text":"Enter the runtime context of the gantry controller. Returns: GantryController \u2013 The instance of the GantryController","title":"__enter__"},{"location":"gantrylib/#gantrylib.gantry_controller.GantryController.__exit__","text":"Exit the runtime context and clean up resources Parameters: exc_type ( Type [ BaseException ] or None ) \u2013 The type of the exception if one was raised, else None. exc_value ( BaseException or None ) \u2013 The exception instance if one was raised, else None. traceback ( TracebackType or None ) \u2013 The traceback object if an exception was raised, else None.","title":"__exit__"},{"location":"gantrylib/#gantrylib.gantry_controller.GantryController.__init__","text":"Initialize a GantryController instance Parameters: properties_file ( string ) \u2013 path to a properties file that holds details of the gantrycrane.","title":"__init__"},{"location":"gantrylib/#gantrylib.gantry_controller.GantryController.connectToCrane","text":"Method to connect to the gantry crane. This method must be implemented by subclasses to define how to connect to a specific gantry crane.","title":"connectToCrane"},{"location":"gantrylib/#gantrylib.gantry_controller.GantryController.executeTrajectory","text":"Execute a trajectory This methods must be implemented by subclasses to define how the trajectory is executed. Parameters: traj ( tuple ) \u2013 Trajectory tuple as returned by the TrajectoryGenerator","title":"executeTrajectory"},{"location":"gantrylib/#gantrylib.gantry_controller.GantryController.generateTrajectory","text":"Generate a trajectory using the trajectory generator Parameters: start ( float ) \u2013 The start position of the trajectory stop ( float ) \u2013 The stop position of the trajectory genmethod ( str , default: 'ocp' ) \u2013 Method of generation, either \"ocp\" or \"lqr\". Defaults to \"ocp\". Returns: tuple \u2013 Tuple containing the trajectory","title":"generateTrajectory"},{"location":"gantrylib/#gantrylib.gantry_controller.GantryController.hoist","text":"Perform a hoisting movement Must be implemented by subclasses. Parameters: pos ( float ) \u2013 The target height","title":"hoist"},{"location":"gantrylib/#gantrylib.gantry_controller.GantryController.moveTrajectoryWithoutLog","text":"Move according to the given trajectory Parameters: traj ( tuple ) \u2013 Trajectory as returned by the trajectory generator. Returns: tuple \u2013 The measured trajectory","title":"moveTrajectoryWithoutLog"},{"location":"gantrylib/#gantrylib.gantry_controller.GantryController.moveWithLog","text":"Make a movement and log it to a database Parameters: target ( float ) \u2013 target position in meters generator ( str , default: 'ocp' ) \u2013 Method of generation, either \"ocp\" or \"lqr\". Defaults to \"ocp\". Returns: tuple ( ( tuple , tuple ) ) \u2013 A tuple containing the generated trajectory and the measured trajectory","title":"moveWithLog"},{"location":"gantrylib/#gantrylib.gantry_controller.GantryController.moveWithoutLog","text":"Make a movement but don't log it to the database Parameters: target ( float ) \u2013 target position in meters generator ( str , default: 'ocp' ) \u2013 Method of generation, either \"ocp\" or \"lqr\". Defaults to \"ocp\". Returns: tuple ( ( tuple , tuple ) ) \u2013 A tuple containing the generated trajectory and the measured trajectory","title":"moveWithoutLog"},{"location":"gantrylib/#gantrylib.gantry_controller.GantryController.simpleMove","text":"Perform a simple lateral move without trajectory generation Must be implemented by subclasses. Parameters: target ( float ) \u2013 The target position","title":"simpleMove"},{"location":"gantrylib/#gantrylib.gantry_controller.GantryController.storeMeasurement","text":"Store a measurement in the database measurement is assumed to be a tuple as returned by executeTrajectory format: (ts, x, v, a, theta, omega) ts : timestamps [datetime format] x : position [m] v : velocity [m/s] a : acceleration [m/s2] theta : angular position [rad] omega : angular velocity [rad/s] Parameters: measurement ( tuple ) \u2013 Tuple as returned by executeTrajectory","title":"storeMeasurement"},{"location":"gantrylib/#gantrylib.gantry_controller.GantryController.storeTrajectory","text":"Store a trajectory in the database traj is assumed to be tuple as returned by generateTrajectory format: (ts, xs, dxs, ddxs, thetas, dthetas, ddthetas) ts : sample times of solution [s] xs : positions of solution [m] dxs : velocity of solution [m/s] ddxs : acceleration of solution [m/s^2] thetas : angular position of solution [rad] dthetas : angular velocity of solution [rad/s] ddthetas: angular acceleration of solution [rad/s^2] us : input force acting on cart [N] Parameters: traj ( tuple ) \u2013 Trajectory tuple as returned by the trajectory generator.","title":"storeTrajectory"}]}